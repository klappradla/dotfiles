'.source.elixir':
  'case':
    'prefix': 'case'
    'body': 'case $1 do\n\t$0\nend'
  'cond':
    'prefix': 'cond'
    'body': 'cond do\n\t$0\nend'
  'def':
    'prefix': 'def'
    'body': 'def $1 do\n\t$0\nend'
  'defmacro':
    'prefix': 'defmacro'
    'body': 'defmacro $1 do\n\t$0\nend'
  'defmacrop':
    'prefix': 'defmacrop'
    'body': 'defmacrop $1 do\n\t$0\nend'
  'defmodule':
    'prefix': 'defmodule'
    'body': 'defmodule $1 do\n\t$0\nend'
  'defp':
    'prefix': 'defp'
    'body': 'defp $1 do\n\t$0\nend'
  'do':
    'prefix': 'do'
    'body': 'do\n\t$0\nend'
  'doc':
    'prefix': 'doc'
    'body': '@doc """\n$0\n"""'
  'if':
    'prefix': 'if'
    'body': 'if $1 do\n\t$0\nend'
  'moduledoc':
    'prefix': 'mdoc'
    'body': '@moduledoc """\n$0\n"""'
  'defprotocol':
    'prefix': 'defpro'
    'body': 'defprotocol $1 do\n\t$0\nend'
  'defimpl':
    'prefix': 'defi'
    'body': 'defimpl ${1:protocol}, for: ${2:type} do\n\t$0\nend'
  'IO.inspect':
    'prefix': 'ii'
    'body': 'IO.inspect($0)'
  'test':
    'prefix': 'test'
    'body': 'test "$1" do\n\t$0\nend'
