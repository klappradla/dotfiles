let g:ruby_path = system('echo $HOME/.rbenv/shims') " speed up vim-ruby (rbenv)

" Fuzzy finding
set rtp+=/usr/local/opt/fzf
let $FZF_DEFAULT_COMMAND = 'ag -g ""'      " use ack to respect .gitignore

" Plugins (require vim-plug)
call plug#begin('~/.vim/plugged')
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdtree'
Plug 'lifepillar/vim-solarized8'
Plug 'tpope/vim-commentary'                " serious commenting in/out
Plug 'tpope/vim-eunuch'                    " unix file manipulations

" Languages
Plug 'elixir-lang/vim-elixir'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'slim-template/vim-slim'
Plug 'fatih/vim-go'
call plug#end()

" General
set nocompatible                           " vim not vi mode
set mouse=a                                " allow mouse in all modes
set autoread                               " automatically reload buffers
set autowrite                              " automatically save files
set nobackup                               " disable backups
set nowritebackup                          " write file in place
set noswapfile                             " no .swap files
set backspace=indent,eol,start             " make backspace behave normal
set visualbell                             " don't beep
set noerrorbells                           " don't beep
set novb                                   " no flashing of screen
set undofile                               " keep a undo file
set undodir=~/dotfiles/.vimundo

" Search
set incsearch                              " incremental search
set ignorecase                             " seach case insensitive...
set smartcase                              " ... unless it contains capital letter

" Navigation
nnoremap <C-J> <C-W><C-J>        " faster split navigation
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
map <C-n> :NERDTreeToggle<CR>    " toggle NERDTree with ctrl n
nnoremap <c-p> :FZF<cr>          " use fzf like ctrl p

" Editing
set expandtab                              " use softtabs
set tabstop=2
set shiftwidth=2
set shiftround
filetype plugin indent on                  " filetype matching indention
syntax on                                  " syntax highlighting
set wrap linebreak nolist                  " line wrapping
set breakindent                            " indent wrapped lines

" Spelling
autocmd FileType gitcommit setlocal spell        " spell check for git commit messages
autocmd BufRead,BufNewFile *.md setlocal spell   " spell check for markdown files
set complete+=kspell                             " autocomplete words

" Appearance
set ruler                                  " display cursor position
set colorcolumn=80                         " highlight 80 char column
set number                                 " show line numbers
set termguicolors
colorscheme solarized8_dark
set background=dark

" Functions
fun! StripTrailingWhiteSpace()             " Strip trailing whitespaces (where needed)
  if &ft =~ 'markdown'
    return
  endif
  %s/\s\+$//e
endfun
autocmd bufwritepre * :call StripTrailingWhiteSpace()
